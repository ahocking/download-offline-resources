#groups for different type o resources
groups:
- name: PCF Core
  jobs: [ops-manager-2-0, ops-manager-2-1, elastic-runtime-2-0, elastic-runtime-2-1]

- name: Service Tiles
  jobs: [isolation-segment, mysql, mysqlv2, rabbitmq, spring-cloud-services, redis, healthwatch, minio, credhub-service-broker, mongodb-enterprise-service, crunchy-postgresql, single-sign-on, metrics, ecs-service-broker]

- name: Stemcells
  jobs: [stemcell-3468-25, stemcell-3468-42, stemcell-3541-30, stemcell-3468-27, stemcell-3468-28, stemcell-3541-25, stemcell-3445-30, stemcell-3363-53, stemcell-3445-29]

#pivnet resources for Pivotal Products
#pivnet stemcells
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: stemcell-pivnet-3363-53
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3363\.53$
    sort_by: semver

- name: stemcell-pivnet-3445-30
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3445\.30$
    sort_by: semver

- name: stemcell-pivnet-3445-29
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3445\.29$
    sort_by: semver

- name: stemcell-pivnet-3468-25
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3468\.25$
    sort_by: semver

- name: stemcell-pivnet-3468-27
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3468\.27$
    sort_by: semver

- name: stemcell-pivnet-3468-28
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3468\.28$
    sort_by: semver

- name: stemcell-pivnet-3468-42
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3468\.42$
    sort_by: semver

- name: stemcell-pivnet-3541-25
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3541\.25$
    sort_by: semver

- name: stemcell-pivnet-3541-30
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: stemcells
    product_version: 3541\.30$
    sort_by: semver

#pivnet opsman, ERT and services
- name: ops-manager-pivnet-2-0
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: ops-manager
    product_version: {{opsman_major_minor_version_2_0}}
    sort_by: semver

- name: elastic-runtime-pivnet-2-0
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: elastic-runtime
    product_version: {{ert_major_minor_version_2_0}}
    sort_by: semver

- name: ops-manager-pivnet-2-1
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: ops-manager
    product_version: {{opsman_major_minor_version_2_1}}
    sort_by: semver

- name: elastic-runtime-pivnet-2-1
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: elastic-runtime
    product_version: {{ert_major_minor_version_2_1}}
    sort_by: semver

- name: isolation-segment-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-isolation-segment
    product_version: {{isolation_segment_major_minor_version}}
    sort_by: semver

- name: mysql-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-mysql
    product_version: {{mysql_major_minor_version}}
    sort_by: semver

- name: redis-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-redis
    product_version: {{redis_major_minor_version}}
    sort_by: semver

- name: rabbitmq-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-rabbitmq
    product_version: {{rabbitmq_major_minor_version}}
    sort_by: semver

- name: spring-cloud-services-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-spring-cloud-services
    product_version: {{spring_cloud_services_major_minor_version}}
    sort_by: semver

- name: mysqlv2-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: pivotal-mysql
    product_version: {{mysqlv2_major_minor_version}}
    sort_by: semver

- name: healthwatch-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-healthwatch
    product_version: {{healthwatch_major_minor_version}}
    sort_by: semver

- name: minio-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: minio
    product_version: {{minio_major_minor_version}}
    sort_by: semver

- name: credhub-service-broker-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: credhub-service-broker
    product_version: {{credhub-service-broker_major_minor_version}}
    sort_by: semver

- name: mongodb-enterprise-service-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: mongodb-enterprise-service
    product_version: {{mongodb-enterprise-service_major_minor_version}}

- name: crunchy-postgresql-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: crunchy-postgresql
    product_version: {{crunchy-postgresql_major_minor_version}}

- name: single-sign-on-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: pivotal_single_sign-on_service
    product_version: {{single_sign-on_service_major_minor_version}}

- name: metrics-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: apm
    product_version: {{metrics_major_minor_version}}

- name: ecs-service-broker-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: ecs-service-broker
    product_version: {{ecs-service-broker_major_minor_version}}

#S3 resources for Pivotal Products
- name: ops-manager-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "ops-manager/ops-manager-(.*).tgz"

- name: elastic-runtime-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "elastic-runtime/elastic-runtime-(.*).tgz"

- name: isolation-segment-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-isolation-segment/p-isolation-segment-(.*).tgz"

- name: mysql-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-mysql/p-mysql-(.*).tgz"

- name: mysqlv2-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-mysqlv2/pivotal-mysql-(.*).tgz"

- name: redis-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-redis/p-redis-(.*).tgz"

- name: rabbitmq-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-rabbitmq/p-rabbitmq-(.*).tgz"

- name: healthwatch-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-healthwatch/p-healthwatch-(.*).tgz"

- name: spring-cloud-services-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "p-spring-cloud-services/p-spring-cloud-services-(.*).tgz"

- name: minio-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "minio/minio-(.*).tgz"

- name: credhub-service-broker-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "credhub-service-broker/credhub-service-broker-(.*).tgz"

- name: mongodb-enterprise-service-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "mongodb-enterprise-service/mongodb-enterprise-service-(.*).tgz"

- name: crunchy-postgresql-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "crunchy-postgresql/crunchy-postgresql-(.*).tgz"

- name: single-sign-on-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "single-sign-on/single-sign-on-(.*).tgz"

- name: metrics-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "metrics/metrics-(.*).tgz"

- name: ecs-service-broker-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "ecs-service-broker/ecs-service-broker-(.*).tgz"

#stemcells
- name: stemcell-3468-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "stemcells/3468/bosh-stemcell-(.*)-.*.tgz"
    disable_ssl: false

- name: stemcell-3541-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "stemcells/3541/bosh-stemcell-(.*)-.*.tgz"
    disable_ssl: false

- name: stemcell-3445-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "stemcells/3445/bosh-stemcell-(.*)-.*.tgz"
    disable_ssl: false

- name: stemcell-3363-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "stemcells/3363/bosh-stemcell-(.*)-.*.tgz"
    disable_ssl: false


#jobs to download resources from pivnet and upload to s3 object storage
jobs:
- name: stemcell-3468-25
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3468-25

    params:
      globs: ["*vsphere*"]

  - put: stemcell-3468-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: stemcell-3468-27
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3468-27

    params:
      globs: ["*vsphere*"]

  - put: stemcell-3468-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"


- name: stemcell-3468-28
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3468-28

    params:
      globs: ["*vsphere*"]

  - put: stemcell-3468-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: stemcell-3468-42
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3468-42

    params:
      globs: ["*vsphere*"]

  - put: stemcell-3468-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"


- name: stemcell-3541-25
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3541-25

    params:
      globs: ["*vsphere*"]
  - put: stemcell-3541-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: stemcell-3541-30
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3541-30

    params:
      globs: ["*vsphere*"]
  - put: stemcell-3541-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: stemcell-3445-30
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3445-30

    params:
      globs: ["*vsphere*"]
  - put: stemcell-3445-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: stemcell-3445-29
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3445-29

    params:
      globs: ["*vsphere*"]
  - put: stemcell-3445-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: stemcell-3363-53
  plan:
  - get: stemcell-pivnet
    trigger: true
    resource: stemcell-pivnet-3363-53

    params:
      globs: ["*vsphere*"]
  - put: stemcell-3363-s3
    get_params: {skip_download: true}
    params:
      file: "stemcell-pivnet/*.tgz"

- name: ops-manager-2-0
  plan:
  - get: ops-manager-pivnet
    trigger: true
    resource: ops-manager-pivnet-2-0

    params:
      globs: ["*.ova"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: ops-manager-pivnet
      outputs:
      - name: ops-manager-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat ops-manager-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "ops-manager-tarball/ops-manager-${version}.tgz" -C ops-manager-pivnet .
  - put: ops-manager-s3
    get_params: {skip_download: true}
    params:
      file: "ops-manager-tarball/ops-manager-*.tgz"

- name: ops-manager-2-1
  plan:
  - get: ops-manager-pivnet
    trigger: true
    resource: ops-manager-pivnet-2-1

    params:
      globs: ["*.ova"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: ops-manager-pivnet
      outputs:
      - name: ops-manager-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat ops-manager-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "ops-manager-tarball/ops-manager-${version}.tgz" -C ops-manager-pivnet .
  - put: ops-manager-s3
    get_params: {skip_download: true}
    params:
      file: "ops-manager-tarball/ops-manager-*.tgz"


- name: elastic-runtime-2-0
  plan:
  - get: elastic-runtime-pivnet
    trigger: true
    resource: elastic-runtime-pivnet-2-0

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: elastic-runtime-pivnet
      outputs:
      - name: elastic-runtime-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat elastic-runtime-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "elastic-runtime-tarball/elastic-runtime-${version}.tgz" -C elastic-runtime-pivnet .
  - put: elastic-runtime-s3
    get_params: {skip_download: true}
    params:
      file: "elastic-runtime-tarball/elastic-runtime-*.tgz"

- name: elastic-runtime-2-1
  plan:
  - get: elastic-runtime-pivnet
    trigger: true
    resource: elastic-runtime-pivnet-2-1

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: elastic-runtime-pivnet
      outputs:
      - name: elastic-runtime-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat elastic-runtime-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "elastic-runtime-tarball/elastic-runtime-${version}.tgz" -C elastic-runtime-pivnet .
  - put: elastic-runtime-s3
    get_params: {skip_download: true}
    params:
      file: "elastic-runtime-tarball/elastic-runtime-*.tgz"

- name: isolation-segment
  plan:
  - get: isolation-segment-pivnet
    trigger: true
    resource: isolation-segment-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: isolation-segment-pivnet
      outputs:
      - name: isolation-segment-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat isolation-segment-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "isolation-segment-tarball/p-isolation-segment-${version}.tgz" -C isolation-segment-pivnet .
  - put: isolation-segment-s3
    get_params: {skip_download: true}
    params:
      file: "isolation-segment-tarball/p-isolation-segment-*.tgz"

- name: mysql
  plan:
  - get: mysql-pivnet
    trigger: true
    resource: mysql-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: mysql-pivnet
      outputs:
      - name: mysql-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat mysql-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "mysql-tarball/p-mysql-${version}.tgz" -C mysql-pivnet .
  - put: mysql-s3
    get_params: {skip_download: true}
    params:
      file: "mysql-tarball/p-mysql-*.tgz"

- name: redis
  plan:
  - get: redis-pivnet
    trigger: true
    resource: redis-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: redis-pivnet
      outputs:
      - name: redis-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat redis-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "redis-tarball/p-redis-${version}.tgz" -C redis-pivnet .
  - put: redis-s3
    get_params: {skip_download: true}
    params:
      file: "redis-tarball/p-redis-*.tgz"

- name: rabbitmq
  plan:
  - get: rabbitmq-pivnet
    trigger: true
    resource: rabbitmq-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: rabbitmq-pivnet
      outputs:
      - name: rabbitmq-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat rabbitmq-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "rabbitmq-tarball/p-rabbitmq-${version}.tgz" -C rabbitmq-pivnet .
  - put: rabbitmq-s3
    get_params: {skip_download: true}
    params:
      file: "rabbitmq-tarball/p-rabbitmq-*.tgz"

- name: spring-cloud-services
  plan:
  - get: spring-cloud-services-pivnet
    trigger: true
    resource: spring-cloud-services-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: spring-cloud-services-pivnet
      outputs:
      - name: spring-cloud-services-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat spring-cloud-services-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "spring-cloud-services-tarball/p-spring-cloud-services-${version}.tgz" -C spring-cloud-services-pivnet .
  - put: spring-cloud-services-s3
    get_params: {skip_download: true}
    params:
      file: "spring-cloud-services-tarball/p-spring-cloud-services-*.tgz"

- name: mysqlv2
  plan:
  - get: mysqlv2-pivnet
    trigger: true
    resource: mysqlv2-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: mysqlv2-pivnet
      outputs:
      - name: mysqlv2-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat mysqlv2-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "mysqlv2-tarball/pivotal-mysql-${version}.tgz" -C mysqlv2-pivnet .
  - put: mysqlv2-s3
    get_params: {skip_download: true}
    params:
      file: "mysqlv2-tarball/pivotal-mysql-*.tgz"

- name: healthwatch
  plan:
  - get: healthwatch-pivnet
    trigger: true
    resource: healthwatch-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: healthwatch-pivnet
      outputs:
      - name: healthwatch-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat healthwatch-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "healthwatch-tarball/p-healthwatch-${version}.tgz" -C healthwatch-pivnet .
  - put: healthwatch-s3
    get_params: {skip_download: true}
    params:
      file: "healthwatch-tarball/p-healthwatch-*.tgz"

- name: minio
  plan:
  - get: minio-pivnet
    trigger: true
    resource: minio-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: minio-pivnet
      outputs:
      - name: minio-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat minio-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "minio-tarball/minio-${version}.tgz" -C minio-pivnet .
  - put: minio-s3
    get_params: {skip_download: true}
    params:
      file: "minio-tarball/minio-*.tgz"

- name: credhub-service-broker
  plan:
  - get: credhub-service-broker-pivnet
    trigger: true
    resource: credhub-service-broker-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: credhub-service-broker-pivnet
      outputs:
      - name: credhub-service-broker-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat credhub-service-broker-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "credhub-service-broker-tarball/credhub-service-broker-${version}.tgz" -C credhub-service-broker-pivnet .
  - put: credhub-service-broker-s3
    get_params: {skip_download: true}
    params:
      file: "credhub-service-broker-tarball/credhub-service-broker-*.tgz"

- name: mongodb-enterprise-service
  plan:
  - get: mongodb-enterprise-service-pivnet
    trigger: true
    resource: mongodb-enterprise-service-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: mongodb-enterprise-service-pivnet
      outputs:
      - name: mongodb-enterprise-service-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat mongodb-enterprise-service-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "mongodb-enterprise-service-tarball/mongodb-enterprise-service-${version}.tgz" -C mongodb-enterprise-service-pivnet .
  - put: mongodb-enterprise-service-s3
    get_params: {skip_download: true}
    params:
      file: "mongodb-enterprise-service-tarball/mongodb-enterprise-service-*.tgz"

- name: crunchy-postgresql
  plan:
  - get: crunchy-postgresql-pivnet
    trigger: true
    resource: crunchy-postgresql-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: crunchy-postgresql-pivnet
      outputs:
      - name: crunchy-postgresql-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat crunchy-postgresql-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "crunchy-postgresql-tarball/crunchy-postgresql-${version}.tgz" -C crunchy-postgresql-pivnet .
  - put: crunchy-postgresql-s3
    get_params: {skip_download: true}
    params:
      file: "crunchy-postgresql-tarball/crunchy-postgresql-*.tgz"

- name: single-sign-on
  plan:
  - get: single-sign-on-pivnet
    trigger: true
    resource: single-sign-on-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: single-sign-on-pivnet
      outputs:
      - name: single-sign-on-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat single-sign-on-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "single-sign-on-tarball/single-sign-on-${version}.tgz" -C single-sign-on-pivnet .
  - put: single-sign-on-s3
    get_params: {skip_download: true}
    params:
      file: "single-sign-on-tarball/single-sign-on-*.tgz"

- name: metrics
  plan:
  - get: metrics-pivnet
    trigger: true
    resource: metrics-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: metrics-pivnet
      outputs:
      - name: metrics-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat metrics-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "metrics-tarball/metrics-${version}.tgz" -C metrics-pivnet .
  - put: metrics-s3
    get_params: {skip_download: true}
    params:
      file: "metrics-tarball/metrics-*.tgz"

- name: ecs-service-broker
  plan:
  - get: ecs-service-broker-pivnet
    trigger: true
    resource: ecs-service-broker-pivnet

    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: ecs-service-broker-pivnet
      outputs:
      - name: ecs-service-broker-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat ecs-service-broker-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar czf "ecs-service-broker-tarball/ecs-service-broker-${version}.tgz" -C ecs-service-broker-pivnet .
  - put: ecs-service-broker-s3
    get_params: {skip_download: true}
    params:
      file: "ecs-service-broker-tarball/ecs-service-broker-*.tgz"
